"use strict";var ApplicationConfiguration=function(){var applicationModuleName="tekeisushi",applicationModuleVendorDependencies=["ngResource","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("clients"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("ingredients"),ApplicationConfiguration.registerModule("orders"),ApplicationConfiguration.registerModule("products"),ApplicationConfiguration.registerModule("users"),angular.module("clients").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Clients","clients","dropdown","/clients(/create)?",!1,null,2),Menus.addSubMenuItem("topbar","clients","List Clients","clients"),Menus.addSubMenuItem("topbar","clients","New Client","clients/create")}]),angular.module("clients").config(["$stateProvider",function($stateProvider){$stateProvider.state("listClients",{url:"/clients",templateUrl:"modules/clients/views/list-clients.client.view.html"}).state("createClient",{url:"/clients/create",templateUrl:"modules/clients/views/create-client.client.view.html"}).state("viewClient",{url:"/clients/:clientId",templateUrl:"modules/clients/views/view-client.client.view.html"}).state("editClient",{url:"/clients/:clientId/edit",templateUrl:"modules/clients/views/edit-client.client.view.html"})}]),angular.module("clients").controller("ClientsController",["$scope","$stateParams","$location","Authentication","Clients",function($scope,$stateParams,$location,Authentication,Clients){$scope.authentication=Authentication,$scope.create=function(){var client=new Clients({name:this.name,surname:this.surname,address:this.address,phone:this.phone});client.$save(function(response){$location.path("clients/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(client){if(client){client.$remove();for(var i in $scope.clients)$scope.clients[i]===client&&$scope.clients.splice(i,1)}else $scope.client.$remove(function(){$location.path("clients")})},$scope.update=function(){var client=$scope.client;client.$update(function(){$location.path("clients/"+client._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.clients=Clients.query()},$scope.findOne=function(){$scope.client=Clients.get({clientId:$stateParams.clientId})},$scope.showClient=function(id){$location.path("/clients/"+id)}}]),angular.module("clients").factory("Clients",["$resource",function($resource){return $resource("clients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/orders")}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("ingredients").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Ingredients","ingredients","dropdown","/ingredients(/create)?",!1,null,3),Menus.addSubMenuItem("topbar","ingredients","List Ingredients","ingredients"),Menus.addSubMenuItem("topbar","ingredients","New Ingredient","ingredients/create")}]),angular.module("ingredients").config(["$stateProvider",function($stateProvider){$stateProvider.state("listIngredients",{url:"/ingredients",templateUrl:"modules/ingredients/views/list-ingredients.client.view.html"}).state("createIngredient",{url:"/ingredients/create",templateUrl:"modules/ingredients/views/create-ingredient.client.view.html"}).state("viewIngredient",{url:"/ingredients/:ingredientId",templateUrl:"modules/ingredients/views/view-ingredient.client.view.html"}).state("editIngredient",{url:"/ingredients/:ingredientId/edit",templateUrl:"modules/ingredients/views/edit-ingredient.client.view.html"})}]),angular.module("ingredients").controller("IngredientsController",["$scope","$stateParams","$location","Authentication","Ingredients",function($scope,$stateParams,$location,Authentication,Ingredients){$scope.authentication=Authentication,$scope.units=[{value:"gr",title:"Gr."},{value:"kg",title:"Kg."},{value:"units",title:"Units"},{value:"lts",title:"Lts"}],$scope.create=function(){var ingredient=$scope.ingredient;ingredient.$save(function(response){$location.path("ingredients/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.initCreate=function(){$scope.ingredient=new Ingredients({name:"",quantity:0,unit:$scope.units[0]})},$scope.remove=function(ingredient){if(ingredient){ingredient.$remove();for(var i in $scope.ingredients)$scope.ingredients[i]===ingredient&&$scope.ingredients.splice(i,1)}else $scope.ingredient.$remove(function(){$location.path("ingredients")})},$scope.update=function(){var ingredient=$scope.ingredient;ingredient.$update(function(){$location.path("ingredients/"+ingredient._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.ingredients=Ingredients.query()},$scope.findOne=function(){$scope.ingredient=Ingredients.get({ingredientId:$stateParams.ingredientId})},$scope.showIngredient=function(id){$location.path("/ingredients/"+id)}}]),angular.module("ingredients").factory("Ingredients",["$resource",function($resource){return $resource("ingredients/:ingredientId",{ingredientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("orders").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Orders","orders","dropdown","/orders(/create)?",!1,null,0),Menus.addSubMenuItem("topbar","orders","List Orders","orders"),Menus.addSubMenuItem("topbar","orders","New Order","orders/create")}]),angular.module("orders").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOrders",{url:"/orders",templateUrl:"modules/orders/views/list-orders.client.view.html"}).state("createOrder",{url:"/orders/create",templateUrl:"modules/orders/views/create-order.client.view.html"}).state("viewOrder",{url:"/orders/:orderId",templateUrl:"modules/orders/views/view-order.client.view.html"}).state("editOrder",{url:"/orders/:orderId/edit",templateUrl:"modules/orders/views/edit-order.client.view.html"})}]),angular.module("orders").controller("OrdersController",["$scope","$stateParams","$location","$modal","Authentication","Orders","Products","Clients",function($scope,$stateParams,$location,$modal,Authentication,Orders,Products,Clients){$scope.authentication=Authentication,$scope.createEmpty=function(){$scope.order=new Orders({delivered:!1,deliveryDate:moment(new Date).format("DD/MM/YYYY hh:mm a"),discount:0,price:0,created:new Date,products:[]}),$scope.newClientName="",$scope.validName=!0},$scope.notDeliveredFilter=!0,$scope.fetchClientsAndProducts=function(){$scope.clients=Clients.query(),$scope.productList=Products.query();var date=angular.element(document.getElementById("datetimepicker"));date.datetimepicker({format:"DD/MM/YYYY hh:mm a",minDate:new Date,defaultDate:new Date})},$scope.validateClientName=function(){var names=$scope.newClientName.split(" ");$scope.validName=names.length>=2&&!_.findWhere($scope.clients,{fullname:$scope.newClientName})},$scope.selectClient=function(){this.order.client&&($scope.order.address=$scope.order.client.address,$scope.order.phone=$scope.order.client.phone)},$scope.create=function(){var order=this.order;order.client=this.order.client||0,order.clientName=this.newClientName,order.deliveryDate=angular.element(document.getElementById("datetimepicker")).data("DateTimePicker").date().format(),order.$save(function(response){$location.path("orders/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(order){if(order){order.$remove();for(var i in $scope.orders)$scope.orders[i]===order&&$scope.orders.splice(i,1)}else $scope.order.$remove(function(){$location.path("orders")})},$scope.update=function(){var order=$scope.order;order.$update(function(){$location.path("orders/"+order._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.orders=Orders.query()},$scope.findOne=function(){$scope.order=Orders.get({orderId:$stateParams.orderId})},$scope.addProduct=function(){$scope.order.products.push({product:this.productList[0],quantity:0})},$scope.removeProduct=function(index){this.order.products.splice(index,1),this.updatePrice()},$scope.updatePrice=function(){var price=this.order.products.reduce(function(prev,product){return prev+product.product.price*product.quantity},0);$scope.order.price=price-price*$scope.order.discount/100},$scope.openModal=function(){var modalInstance=$modal.open({animation:!0,templateUrl:"myModalContent.html",controller:"ModalInstanceCtrl",size:"lg",resolve:{clients:function(){return $scope.clients}}});modalInstance.result.then(function(selectedItem){$scope.order.client=selectedItem,$scope.selectClient()})},$scope.showOrder=function(id){$location.path("/orders/"+id)},$scope.changeStatus=function(id,code,$event){var order=_.findWhere($scope.orders,{_id:id}),clientObj=order.client;1===code?order.delivered=!order.delivered:(order.cancelled=!order.cancelled,order.delivered=!1),order.client=order.client._id,order.$update(function(){order.client=clientObj}),$event.stopPropagation(),$event.preventDefault()},$scope.closeAlert=function(){$scope.error=null}}]),angular.module("orders").controller("ModalInstanceCtrl",["$scope","$modalInstance","clients",function($scope,$modalInstance,clients){$scope.clients=clients,$scope.phoneFilter="",$scope.selected={client:$scope.clients[0]},$scope.selectClientInModal=function(){$modalInstance.close($scope.selected.client)},$scope.dismissModal=function(){$modalInstance.dismiss("cancel")}}]),angular.module("orders").factory("Orders",["$resource",function($resource){return $resource("orders/:orderId",{orderId:"@_id"},{update:{method:"PUT"}})}]),angular.module("products").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Products","products","dropdown","/products(/create)?",!1,null,1),Menus.addSubMenuItem("topbar","products","List Products","products"),Menus.addSubMenuItem("topbar","products","New Product","products/create")}]),angular.module("products").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProducts",{url:"/products",templateUrl:"modules/products/views/list-products.client.view.html"}).state("createProduct",{url:"/products/create",templateUrl:"modules/products/views/create-product.client.view.html"}).state("viewProduct",{url:"/products/:productId",templateUrl:"modules/products/views/view-product.client.view.html"}).state("editProduct",{url:"/products/:productId/edit",templateUrl:"modules/products/views/edit-product.client.view.html"})}]),angular.module("products").controller("ProductsController",["$scope","$stateParams","$location","Authentication","Products","Ingredients",function($scope,$stateParams,$location,Authentication,Products,Ingredients){$scope.authentication=Authentication,$scope.ingredients=[];var sumIngredients=function(ingrs){var ingredientsObj={};return _.forEach(ingrs,function(ingredient){var ingredientId=ingredient.ingredient._id;ingredientsObj[ingredientId]?ingredientsObj[ingredientId].quantity+=ingredient.quantity:ingredientsObj[ingredientId]=ingredient}),_.map(ingredientsObj,function(ingr){return ingr})};$scope.createEmpty=function(){$scope.product=new Products({ingredients:[]}),$scope.noMoreIngredients=!1},$scope.fetchIngredients=function(){$scope.ingredientsList=Ingredients.query()},$scope.create=function(){$scope.product.ingredients=sumIngredients($scope.product.ingredients),$scope.product.$save(function(response){$location.path("products/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(product){if(product){product.$remove();for(var i in $scope.products)$scope.products[i]===product&&$scope.products.splice(i,1)}else $scope.product.$remove(function(){$location.path("products")})},$scope.update=function(){$scope.product.ingredients=sumIngredients($scope.product.ingredients);var product=$scope.product;product.$update(function(){$location.path("products/"+product._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.products=Products.query()},$scope.findOne=function(){$scope.product=Products.get({productId:$stateParams.productId}),$scope.product.$promise.then(function(){$scope.getFirstIngredient()||($scope.noMoreIngredients=!0)})},$scope.showProduct=function(id){$location.path("/products/"+id)},$scope.addIngredient=function(){$scope.product.ingredients.push({ingredient:this.getFirstIngredient(),quantity:0}),this.getFirstIngredient()||($scope.noMoreIngredients=!0)},$scope.getFirstIngredient=function(){return _.find(this.ingredientsList,function(ingr){return!_.find($scope.product.ingredients,function(ing){return ing.ingredient.name===ingr.name})})},$scope.removeIngredient=function(index){this.product.ingredients.splice(index,1),$scope.noMoreIngredients=!1}}]),angular.module("products").factory("Products",["$resource",function($resource){return $resource("products/:productId",{productId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);